{"version":3,"sources":["webpack:///../src/TextField/TextField.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","of","TextField","parentName","__position","__code","__scope","Playground","Props","MenuItem","makeStyles","React","text","number","password","select","readText","state","setState","readOnly","setReadOnly","handleChange","event","key","target","value","label","type","error","helperText","onChange","e","required","onClick","isMDXComponent"],"mappings":"u4BAYO,IAAMA,EAAe,Q,6MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,aADR,aAGA,iBAAQ,CACN,GAAM,SADR,SAGA,YAAC,IAAD,CAAOC,GAAIC,IAAWF,QAAQ,UAC9B,iBAAQ,CACN,GAAM,cADR,cAGA,qBAAG,6BAAGG,WAAW,KAAQ,CACrB,KAAQ,+CADT,gBAGH,iBAAQ,CACN,GAAM,eADR,eAGA,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,wmDAAmoDC,SAAO,GAC3qDP,QACAH,kBACAW,eACAC,UACAN,cACAO,aACAC,gBAP2qD,gBAQ3qDd,IAR2qD,EAS3qDH,eAT2qD,GAU1qDO,QAAQ,eACZ,WAAM,MACyBW,WAAe,CACvCC,KAAM,GACNC,OAAQ,GACRC,SAAU,GACVC,OAAQ,GACRC,SAAU,gBALLC,EADN,KACaC,EADb,OAQ+BP,YAAe,GAAxCQ,EARN,KAQgBC,EARhB,KAUKC,EAAe,SAACC,EAAOC,GAAQ,MACnCL,EAAS,EAAD,KAAMD,GAAN,WACLM,GAAMD,EAAME,OAAOC,MADd,MAKV,OAAO,uBACP,YAAC,IAAD,CAAWC,MAAM,OAAOC,KAAK,OAAOF,MAAOR,EAAML,KAAMgB,OAAK,EAACC,WAAW,KAAKC,SAAU,SAAAC,GAAC,OAAIV,EAAaU,EAAG,SAAS/B,QAAQ,cAC7H,uBACA,YAAC,IAAD,CAAW0B,MAAM,OAAOM,UAAQ,EAACL,KAAK,WAAWF,MAAOR,EAAMH,SAAUgB,SAAU,SAAAC,GAAC,OAAIV,EAAaU,EAAG,aAAa/B,QAAQ,cAC5H,uBACA,YAAC,IAAD,CAAW0B,MAAM,OAAOC,KAAK,SAASF,MAAOR,EAAMJ,OAAQiB,SAAU,SAAAC,GAAC,OAAIV,EAAaU,EAAG,WAAW/B,QAAQ,cAC7G,uBACA,YAAC,IAAD,CAAW0B,MAAM,OAAOC,KAAK,SAASF,MAAOR,EAAMF,OAAQe,SAAU,SAAAC,GAAC,OAAIV,EAAaU,EAAG,WAAW/B,QAAQ,aAC3G,YAAC,IAAD,CAAUyB,MAAO,GAAIzB,QAAQ,YAA7B,OACA,YAAC,IAAD,CAAUyB,MAAO,GAAIzB,QAAQ,YAA7B,UACA,YAAC,IAAD,CAAUyB,MAAO,GAAIzB,QAAQ,YAA7B,WAEF,uBACA,YAAC,IAAD,CAAW0B,MAAOP,EAAW,OAAS,OAAQA,SAAUA,EAAUQ,KAAK,OAAOF,MAAOR,EAAMD,SAAUa,WAAW,gBAAgBC,SAAU,SAAAC,GAAC,OAAIV,EAAaU,EAAG,aAAa/B,QAAQ,cACpL,sBAAQiC,QAAS,kBAAMb,GAAaD,KAAYA,EAAW,OAAS,QACpE,iC,2MAQRtB,EAAWqC,gBAAiB","file":"component---src-text-field-text-field-mdx-cee21334b80ecfa6ff59.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/travis/build/HarryChen0506/vc-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport TextField from './';\nimport MenuItem from '../MenuItem';\nimport { makeStyles } from '@material-ui/core/styles';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"textfield\"\n    }}>{`TextField`}</h1>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <Props of={TextField} mdxType=\"Props\" />\n    <h2 {...{\n      \"id\": \"more-props\"\n    }}>{`More Props`}</h2>\n    <p><a parentName=\"p\" {...{\n        \"href\": \"https://material-ui.com/zh/api/text-field/\"\n      }}>{`see details`}</a></p>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <Playground __position={1} __code={'() => {\\n  const [state, setState] = React.useState({\\n    text: \\'\\',\\n    number: \\'\\',\\n    password: \\'\\',\\n    select: 10,\\n    readText: \\'hello world\\',\\n  })\\n  const [readOnly, setReadOnly] = React.useState(true)\\n  const handleChange = (event, key) => {\\n    setState({ ...state, [key]: event.target.value })\\n  }\\n  return (\\n    <div>\\n      <TextField\\n        label=\\\"普通输入\\\"\\n        type=\\\"text\\\"\\n        value={state.text}\\n        error\\n        helperText=\\\"必填\\\"\\n        onChange={e => handleChange(e, \\'text\\')}\\n      />\\n      <br />\\n      <TextField\\n        label=\\\"密码输入\\\"\\n        required\\n        type=\\\"password\\\"\\n        value={state.password}\\n        onChange={e => handleChange(e, \\'password\\')}\\n      />\\n      <br />\\n      <TextField\\n        label=\\\"数字输入\\\"\\n        type=\\\"number\\\"\\n        value={state.number}\\n        onChange={e => handleChange(e, \\'number\\')}\\n      />\\n      <br />\\n      <TextField\\n        label=\\\"下拉选择\\\"\\n        type=\\\"select\\\"\\n        value={state.select}\\n        onChange={e => handleChange(e, \\'select\\')}\\n      >\\n        <MenuItem value={10}>Ten</MenuItem>\\n        <MenuItem value={20}>Twenty</MenuItem>\\n        <MenuItem value={30}>Thirty</MenuItem>\\n      </TextField>\\n      <br />\\n      <TextField\\n        label={readOnly ? \\'只读模式\\' : \\'可写模式\\'}\\n        readOnly={readOnly}\\n        type=\\\"text\\\"\\n        value={state.readText}\\n        helperText=\\\"注意: 只读模式下不可编辑\\\"\\n        onChange={e => handleChange(e, \\'readText\\')}\\n      />\\n      <button onClick={() => setReadOnly(!readOnly)}>\\n        {readOnly ? \\'开启可写\\' : \\'开启只读\\'}\\n      </button>\\n      <br />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      TextField,\n      MenuItem,\n      makeStyles,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [state, setState] = React.useState({\n          text: '',\n          number: '',\n          password: '',\n          select: 10,\n          readText: 'hello world'\n        });\n        const [readOnly, setReadOnly] = React.useState(true);\n\n        const handleChange = (event, key) => {\n          setState({ ...state,\n            [key]: event.target.value\n          });\n        };\n\n        return <div>\n        <TextField label='普通输入' type='text' value={state.text} error helperText='必填' onChange={e => handleChange(e, 'text')} mdxType=\"TextField\" />\n        <br />\n        <TextField label='密码输入' required type='password' value={state.password} onChange={e => handleChange(e, 'password')} mdxType=\"TextField\" />\n        <br />\n        <TextField label='数字输入' type='number' value={state.number} onChange={e => handleChange(e, 'number')} mdxType=\"TextField\" />\n        <br />\n        <TextField label='下拉选择' type='select' value={state.select} onChange={e => handleChange(e, 'select')} mdxType=\"TextField\">\n          <MenuItem value={10} mdxType=\"MenuItem\">Ten</MenuItem>\n          <MenuItem value={20} mdxType=\"MenuItem\">Twenty</MenuItem>\n          <MenuItem value={30} mdxType=\"MenuItem\">Thirty</MenuItem>\n        </TextField>\n        <br />\n        <TextField label={readOnly ? '只读模式' : '可写模式'} readOnly={readOnly} type='text' value={state.readText} helperText='注意: 只读模式下不可编辑' onChange={e => handleChange(e, 'readText')} mdxType=\"TextField\" />\n        <button onClick={() => setReadOnly(!readOnly)}>{readOnly ? '开启可写' : '开启只读'}</button>\n        <br />\n      </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}