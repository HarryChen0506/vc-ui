{"version":3,"sources":["webpack:///../src/voxios/voxios.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","Voxios","defaultConfig","defaultVoxios","result","setResult","defaultRequest","getInstance","JSON","stringify","onClick","url","params","id","config","throwErrorMessage","then","res","data","catch","code","message","updatedRequest","registerConfig","useConfig","updateConfig","onSuccess","err","customRequest","setConfig","addAuthHeader","token","addModule","console","log","context","Math","random","logout","getModule","name","transformHeaders","headers","axiosConfig","timeout","auth","username","password","isMDXComponent"],"mappings":"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","file":"component---src-voxios-voxios-mdx-8ade0f50483351257fec.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/travis/build/HarryChen0506/vc-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState } from 'react';\nimport { Voxios, defaultConfig } from './index';\nimport defaultVoxios from './defaultVoxios';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"voxios\"\n    }}>{`voxios`}</h1>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <p>{`  基于axios封装的一个http请求库。`}</p>\n    <p>{`  使用默认配置可以开箱即用，同时支持自定义配置，能满足不同平台的特异性需求。`}</p>\n    <h3 {...{\n      \"id\": \"创建请求实例\"\n    }}>{`创建请求实例`}</h3>\n    <h4 {...{\n      \"id\": \"请求实例创建\"\n    }}>{`请求实例创建`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { Voxios, voxiosDefaultConfig as defaultConfig} from 'voxelcloud-ui'\n\n// 方式一 全局注册配置\nVoxios.registerConfig('default', defaultConfig)\nconst defaultVoxios = new Voxios().useConfig('default')\nconst defaultRequest = defaultVoxios.getInstance()\n\n// 方式二 类实例注册配置\nconst defaultRequest = new Voxios().registerConfig('default', defaultConfig).useConfig('default').getInstance()\n\n// 方式三 注册自定义配置\nconst customConfig = { onSuccess: () => { } }\nconst customRequest = new Voxios().registerConfig('custom', customConfig).useConfig('custom').getInstance()\n\n// 方式四 直接使用自定义配置\nconst customConfig = { onSuccess: () => { } }\nconst customRequest = new Voxios().setConfig(customConfig).getInstance()\n\n// 方式五 添加和调用自定义模块，例如: 注册和调用logout服务\nconst customRequest = new Voxios()\n    .addModule('logout', () => {\n      console.log('--- logout ---')\n    })\n    .updateConfig((config) => {\n      const onSuccess = (res, context) => {\n        // ...\n        const logout = context.getModule('logout')\n        typeof logout === 'function' && logout()\n        // ...\n      };\n      return { ...config, onSuccess };\n    }).getInstance();\n      \n`}</code></pre>\n    <h4 {...{\n      \"id\": \"请求实例配置\"\n    }}>{`请求实例配置`}</h4>\n    <p>{`可在这里插入自定义钩子函数，以及配置信息，内部项目均为可选`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const config = { \n    // 是否抛出报错信息\n    throwErrorMessage: false, \n\n    // 添加鉴权请求头\n    addAuthHeader: () => {}, \n\n    // headers转换器\n    transformHeaders: () => {},\n\n    // axios请求执行前执行的钩子函数\n    onBeforeRequest: (context) => { }, // context为Voxios实例\n\n    // 请求成功后执行的钩子函数\n    onSuccess: (res, context) => {}, // context为Voxios实例\n\n    // 请求失败后进入的钩子函数\n    onError: (error, context) => {}, // context为Voxios实例\n\n    // axios自身支持的配置参数\n    axiosConfig: {}, \n}\n\nconst request = new Voxios().setConfig(config).getInstance()\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"请求调用\"\n    }}>{`请求调用`}</h3>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`\nimport { Voxios, voxiosDefaultConfig as defaultConfig} from 'voxelcloud-ui'\n\n// 创建请求实例\nconst request = new Voxios().setConfig(defaultConfig).getInstance()\n\n// 配置请求参数\nconst options = { \n    url: 'https://yapi.voxelcloud.net.cn/mock/:id/api/auth/users',\n    method: 'get',\n    params: { id: 66 },\n    data: { name: [1, 2, 3] },\n    config: {\n      throwErrorMessage: true,\n    },\n    axiosConfig: {\n      timeout: 100,\n    }\n}\n\n// 调用请求\nrequest(options).then((res) => {\n  console.log(res)\n}).catch((err) => {\n  console.log(err)\n})\n\n`}</code></pre>\n    <h3 {...{\n      \"id\": \"请求参数配置\"\n    }}>{`请求参数配置`}</h3>\n    <p>{`下面是创建请求时可以用的配置选项。只有 url 是必需的。如果没有指定 method，请求将默认使用 get 方法。`}</p>\n    <p>{`详细配置可以参考: `}<a parentName=\"p\" {...{\n        \"href\": \"http://www.axios-js.com/zh-cn/docs/index.html#%E8%AF%B7%E6%B1%82%E9%85%8D%E7%BD%AE\"\n      }}>{`axios`}</a></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  {\n    // \\`url\\` 是用于请求的服务器 URL \n    url: '/user/:id', // 必填\n\n    // \\`method\\` 是创建请求时使用的方法\n    method: 'get', // 可选, 默认 \\`get\\`\n\n    // \\`params\\` 用来替换url中path部分的占位符，如\\`/user/:id\\` -> \\`/user/66\\`\n    params: { id: 66 }, // 可选\n\n    //  \\`data\\` 是请求发送的数据\n    // 当请求方法'PUT', 'POST', 和 'PATCH'时，作为请求主体被发送的数据\n    // 当请求方法'GET'时, 作为 URL 参数发送\n    data: { name: [1, 2, 3] }, // 可选\n\n    //  \\`config\\` 同Voxios实例的配置项，此处配置可覆盖实例的配置\n    config: {\n      throwErrorMessage: false,\n      // ...\n    }\n\n    // \\`axiosConfig\\` axios支持的配置参数, 此处配置可前面所有地方的配置\n    axiosConfig: { \n       timeout: 100, // 指定请求超时的毫秒数(0 表示无超时时间)\n       // ...\n    }\n  }\n`}</code></pre>\n    <h5 {...{\n      \"id\": \"案例1---默认配置\"\n    }}>{`案例1 - 默认配置`}</h5>\n    <Playground __position={0} __code={'() => {\\n  const url =\\n    \\'https://yapi.voxelcloud.net.cn/mock/:id/api/platform/announcements\\'\\n  const [result, setResult] = useState(\\'\\')\\n  const defaultRequest = defaultVoxios.getInstance()\\n  const handleClick = () => {\\n    const options = {\\n      url,\\n      params: { id: 66 },\\n      config: { throwErrorMessage: true },\\n    }\\n    defaultRequest(options)\\n      .then(res => {\\n        setResult(res.data)\\n      })\\n      .catch(({ code, message, data } = {}) => {\\n        setResult({ code, message, data })\\n      })\\n  }\\n  return (\\n    <div>\\n      <pre>result: {JSON.stringify(result, null, 2)}</pre>\\n      <button onClick={handleClick}>默认配置</button>\\n      <br />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Voxios,\n      defaultConfig,\n      defaultVoxios,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const url = 'https://yapi.voxelcloud.net.cn/mock/:id/api/platform/announcements';\n        const [result, setResult] = useState('');\n        const defaultRequest = defaultVoxios.getInstance();\n\n        const handleClick = () => {\n          const options = {\n            url,\n            params: {\n              id: 66\n            },\n            config: {\n              throwErrorMessage: true\n            }\n          };\n          defaultRequest(options).then(res => {\n            setResult(res.data);\n          }).catch(({\n            code,\n            message,\n            data\n          } = {}) => {\n            setResult({\n              code,\n              message,\n              data\n            });\n          });\n        };\n\n        return <div>\n          <pre>result: {JSON.stringify(result, null, 2)}</pre>\n          <button onClick={handleClick}>默认配置</button><br />\n        </div>;\n      }}\n    </Playground>\n    <h5 {...{\n      \"id\": \"案例2---更改默认配置\"\n    }}>{`案例2 - 更改默认配置`}</h5>\n    <Playground __position={1} __code={'() => {\\n  const url = \\'https://yapi.voxelcloud.net.cn/mock/:id/api/auth/users\\'\\n  const [result, setResult] = useState(\\'\\')\\n  const defaultVoxios = new Voxios()\\n    .registerConfig(\\'default\\', defaultConfig)\\n    .useConfig(\\'default\\')\\n  const updatedRequest = defaultVoxios\\n    .updateConfig(config => {\\n      const onSuccess = res => {\\n        res.data = \\'hello, world!\\'\\n        return res\\n      }\\n      return { ...config, onSuccess }\\n    })\\n    .getInstance()\\n  const handleClick = () => {\\n    const options = { url, params: { id: 66 } }\\n    updatedRequest(options)\\n      .then(res => {\\n        setResult(res.data)\\n      })\\n      .catch(err => {\\n        setResult(err)\\n      })\\n  }\\n  return (\\n    <div>\\n      <pre>result: {JSON.stringify(result, null, 2)}</pre>\\n      <button onClick={handleClick}>更改默认配置</button>\\n      <br />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Voxios,\n      defaultConfig,\n      defaultVoxios,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const url = 'https://yapi.voxelcloud.net.cn/mock/:id/api/auth/users';\n        const [result, setResult] = useState('');\n        const defaultVoxios = new Voxios().registerConfig('default', defaultConfig).useConfig('default');\n        const updatedRequest = defaultVoxios.updateConfig(config => {\n          const onSuccess = res => {\n            res.data = 'hello, world!';\n            return res;\n          };\n\n          return { ...config,\n            onSuccess\n          };\n        }).getInstance();\n\n        const handleClick = () => {\n          const options = {\n            url,\n            params: {\n              id: 66\n            }\n          };\n          updatedRequest(options).then(res => {\n            setResult(res.data);\n          }).catch(err => {\n            setResult(err);\n          });\n        };\n\n        return <div>\n          <pre>result: {JSON.stringify(result, null, 2)}</pre>\n          <button onClick={handleClick}>更改默认配置</button><br />\n        </div>;\n      }}\n    </Playground>\n    <h5 {...{\n      \"id\": \"案例3---自定义配置\"\n    }}>{`案例3 - 自定义配置`}</h5>\n    <Playground __position={2} __code={'() => {\\n  const url = \\'https://yapi.voxelcloud.net.cn/mock/:id/api/auth/users\\'\\n  const [result, setResult] = useState(\\'\\')\\n  const customRequest = new Voxios()\\n    .setConfig({\\n      addAuthHeader: () => ({ token: \\'hello\\' }),\\n    })\\n    .addModule(\\'logout\\', () => {\\n      console.log(\\'--- logout ---\\')\\n    })\\n    .updateConfig(config => {\\n      const onSuccess = (res, context) => {\\n        res.data = \\'custom voxios request\\'\\n        if (Math.random() > 0.5) {\\n          const logout = context.getModule(\\'logout\\')\\n          typeof logout === \\'function\\' && logout()\\n        } else {\\n          console.log(\\'should not to logout\\')\\n        }\\n        return res\\n      }\\n      return { ...config, onSuccess }\\n    })\\n    .getInstance()\\n  const handleClick = () => {\\n    const options = {\\n      url,\\n      params: { id: 66 },\\n      data: { name: [1, 2, 3] },\\n      config: {\\n        transformHeaders: headers => ({ ...headers, \\'other-token\\': 12345 }),\\n        throwErrorMessage: true,\\n      },\\n      axiosConfig: {\\n        timeout: 100,\\n        auth: {\\n          username: \\'janedoe\\',\\n          password: \\'s00pers3cret\\',\\n        },\\n      },\\n    }\\n    customRequest(options)\\n      .then(res => {\\n        setResult(res.data)\\n      })\\n      .catch(err => {\\n        setResult(err)\\n      })\\n  }\\n  return (\\n    <div>\\n      <pre>result: {JSON.stringify(result, null, 2)}</pre>\\n      <button onClick={handleClick}>自定义配置</button>\\n      <br />\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      Voxios,\n      defaultConfig,\n      defaultVoxios,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const url = 'https://yapi.voxelcloud.net.cn/mock/:id/api/auth/users';\n        const [result, setResult] = useState('');\n        const customRequest = new Voxios().setConfig({\n          addAuthHeader: () => ({\n            token: 'hello'\n          })\n        }).addModule('logout', () => {\n          console.log('--- logout ---');\n        }).updateConfig(config => {\n          const onSuccess = (res, context) => {\n            res.data = 'custom voxios request';\n\n            if (Math.random() > 0.5) {\n              const logout = context.getModule('logout');\n              typeof logout === 'function' && logout();\n            } else {\n              console.log('should not to logout');\n            }\n\n            return res;\n          };\n\n          return { ...config,\n            onSuccess\n          };\n        }).getInstance();\n\n        const handleClick = () => {\n          const options = {\n            url,\n            params: {\n              id: 66\n            },\n            data: {\n              name: [1, 2, 3]\n            },\n            config: {\n              transformHeaders: headers => ({ ...headers,\n                'other-token': 12345\n              }),\n              throwErrorMessage: true\n            },\n            axiosConfig: {\n              timeout: 100,\n              auth: {\n                username: 'janedoe',\n                password: 's00pers3cret'\n              }\n            }\n          };\n          customRequest(options).then(res => {\n            setResult(res.data);\n          }).catch(err => {\n            setResult(err);\n          });\n        };\n\n        return <div>\n          <pre>result: {JSON.stringify(result, null, 2)}</pre>\n          <button onClick={handleClick}>自定义配置</button><br />\n        </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}