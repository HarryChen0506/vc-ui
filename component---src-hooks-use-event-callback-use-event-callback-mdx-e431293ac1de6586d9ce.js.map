{"version":3,"sources":["webpack:///../src/hooks/useEventCallback/useEventCallback.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Props","useState","useRef","useEventCallback","Button","value","setValue","handleClick1","React","console","log","handleClick2","onChange","e","target","onClick","isMDXComponent"],"mappings":"2RAYaA,G,UAAe,S,iOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,oBADR,oBAGA,iBAAQ,CACN,GAAM,eADR,eAGA,oIAEA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,gBADZ,yNAYL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,mkBAA0kBC,SAAO,GAClnBL,QACAH,kBACAS,eACAC,UACAC,oBACAC,gBACAC,qBACAC,YARknB,gBASlnBd,IATknB,EAUlnBH,eAVknB,GAWjnBO,QAAQ,eACZ,WAAM,MACyBO,mBAAS,IAA5BI,EADN,KACaC,EADb,KAEKC,EAAeC,eAAkB,WACrCC,QAAQC,IAAI,oBAAqBL,KAChC,CAACA,IACEM,EAAeR,aAAiB,WACpCM,QAAQC,IAAI,yBAA0BL,KACrC,CAACA,IACJ,OAAO,uBACL,qBAAOA,MAAOA,EAAOO,SAAU,SAAAC,GAAC,OAAIP,EAASO,EAAEC,OAAOT,UACtD,uBACE,YAAC,IAAD,CAAQU,QAASR,EAAcb,QAAQ,UAAvC,qBAA0E,uBAC1E,YAAC,IAAD,CAAQqB,QAASJ,EAAcjB,QAAQ,UAAvC,qC,+NASZH,EAAWyB,gBAAiB","file":"component---src-hooks-use-event-callback-use-event-callback-mdx-e431293ac1de6586d9ce.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/travis/build/HarryChen0506/vc-ui/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground, Props } from 'docz';\nimport { useState, useRef } from 'react';\nimport useEventCallback from './index';\nimport Button from './Button';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useeventcallback\"\n    }}>{`useEventCallback`}</h1>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <p>{`  与useCallback这样的hook不同， 即使依赖发生变化，也不会导致函数的引用地址发生变化。\n在子组件的hander属性被useEventCallback处理后的场景下，可以显著减少子组件的重渲染次数。`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useEventCallback } from 'vc-ui'\n\nconst Button = ({ onClick, children }) => {\n  console.log('render Button: ', children)\n  return (\n    <button onClick={onClick}>{children}</button>\n  )\n}\n      \n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [value, setValue] = useState(\\'\\')\\n  const handleClick1 = React.useCallback(() => {\\n    console.log(\\'click useCallback\\', value)\\n  }, [value])\\n  const handleClick2 = useEventCallback(() => {\\n    console.log(\\'click useEventCallback\\', value)\\n  }, [value])\\n  return (\\n    <div>\\n      <input value={value} onChange={e => setValue(e.target.value)}></input>\\n      <div>\\n        <Button onClick={handleClick1}>click useCallback</Button>\\n        <br />\\n        <Button onClick={handleClick2}>click useEventCallback</Button>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Props,\n      useState,\n      useRef,\n      useEventCallback,\n      Button,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const [value, setValue] = useState('');\n        const handleClick1 = React.useCallback(() => {\n          console.log('click useCallback', value);\n        }, [value]);\n        const handleClick2 = useEventCallback(() => {\n          console.log('click useEventCallback', value);\n        }, [value]);\n        return <div>\n          <input value={value} onChange={e => setValue(e.target.value)}></input>\n          <div>\n            <Button onClick={handleClick1} mdxType=\"Button\">click useCallback</Button><br />\n            <Button onClick={handleClick2} mdxType=\"Button\">click useEventCallback</Button>\n          </div>\n        </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}